<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atlas</name>
    </assembly>
    <members>
        <member name="T:Atlas.ArgumentElementNullException">
            <summary>
            	The exception that is thrown when one of the elements of an argument provided to the method is <see langword="null" />.
            </summary>
        </member>
        <member name="M:Atlas.ArgumentElementNullException.#ctor(System.String)">
            <summary>
            	Creates an instance of <see cref="T:Atlas.ArgumentElementNullException" />.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Atlas.ArgumentElementNullException.#ctor(System.String,System.Exception)">
            <summary>
            	Creates an instance of <see cref="T:Atlas.ArgumentElementNullException" />.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Atlas.ArgumentElementNullException.#ctor(System.String,System.String)">
            <summary>
            	Creates an instance of <see cref="T:Atlas.ArgumentElementNullException" />.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Atlas.ArgumentIndexNullException">
            <summary>
            	The exception that is thrown when one of the indexable elements of an argument provided to the method is <see langword="null" />.
            </summary>
        </member>
        <member name="P:Atlas.ArgumentIndexNullException.Index">
            <summary>
            	The index of the element within the argument that caused the exception.
            </summary>
        </member>
        <member name="P:Atlas.ArgumentIndexNullException.Message">
            <inheritdoc cref="P:System.ArgumentException.Message" />
        </member>
        <member name="M:Atlas.ArgumentIndexNullException.#ctor(System.String,System.Int32)">
            <summary>
            	Creates an instance of <see cref="T:Atlas.ArgumentIndexNullException" />.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="index">The index within the parameter that caused the exception.</param>
        </member>
        <member name="M:Atlas.ArgumentIndexNullException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            	Creates an instance of <see cref="T:Atlas.ArgumentIndexNullException" />.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="index">The index within the parameter that caused the exception.</param>
        </member>
        <member name="M:Atlas.ArgumentIndexNullException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            	Creates an instance of <see cref="T:Atlas.ArgumentIndexNullException" />.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="index">The index within the parameter that caused the exception.</param>
        </member>
        <member name="T:Atlas.DictionaryExtensions">
            <summary>
            	A collection of extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Atlas.DictionaryExtensions.GetOrInsert``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            	If <paramref name="key"/> is not present in the dictionary, it is inserted with a value of <paramref name="default"/>.
            	The value of the dictionary element is then returned.
            </summary>
            <param name="this"></param>
            <param name="key">The key of the dictionary entry to get.</param>
            <param name="default">The default value of the dictionary entry.</param>
            <typeparam name="TKey">The type of the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of the dictionary.</typeparam>
        </member>
        <member name="M:Atlas.DictionaryExtensions.GetOrInsertWith``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            	If <paramref name="key"/> is not present in the dictionary, it is inserted with the result of <paramref name="default"/>.
            	The value of the dictionary element is then returned.
            	<p>This is the lazily-evaluated variant of <seealso cref="M:Atlas.DictionaryExtensions.GetOrInsert``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)"/>.</p>
            </summary>
            <param name="this"></param>
            <param name="key">The key of the dictionary entry to get.</param>
            <param name="default">The default value of the dictionary entry.</param>
            <typeparam name="TKey">The type of the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of the dictionary.</typeparam>
        </member>
        <member name="M:Atlas.DictionaryExtensions.OptionGetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            	Gets a dictionary value. If it does exist, returns Some, otherwise None.
            	<p>This is the <see cref="T:Atlas.Option`1"/> compliant version of <see cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)"/>.</p>
            </summary>
            <param name="this"></param>
            <param name="key">The key of the dictionary entry to get.</param>
            <typeparam name="TKey">The type of the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of the dictionary.</typeparam>
        </member>
        <member name="T:Atlas.ServiceKernelExtensions">
            <summary>
            	A collection of extension methods for <see cref="T:Atlas.IServiceKernel"/>.
            </summary>
        </member>
        <member name="M:Atlas.ServiceKernelExtensions.LoadEntryType``1(Atlas.IServiceKernel)">
            <summary>
            	Loads an entry module type into the service kernel.
            </summary>
            <param name="this"></param>
            <typeparam name="TModule">The type of the module.</typeparam>
        </member>
        <member name="M:Atlas.ServiceKernelExtensions.LoadEntryType(Atlas.IServiceKernel,System.Type)">
            <summary>
            	Loads an entry module type into the service kernel.
            </summary>
            <param name="this"></param>
            <param name="type">The type of the module.</param>
        </member>
        <member name="M:Atlas.ServiceKernelExtensions.LoadEntryTypes(Atlas.IServiceKernel,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            	Loads any entry module types from an enumerable into the service kernel.
            </summary>
            <param name="this"></param>
            <param name="types">The possible module types to load. May contain zero modules.</param>
        </member>
        <member name="T:Atlas.ServiceResolverExtensions">
            <summary>
                A collection of extension methods for <see cref="T:Atlas.IServiceResolver"/>.
            </summary>
        </member>
        <member name="M:Atlas.ServiceResolverExtensions.Get``1(Atlas.IServiceResolver)">
            <summary>
            	Resolves a service using no context (<see cref="T:Atlas.Unit"/>).
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
        </member>
        <member name="T:Atlas.WholeBindingImpl`2">
            <summary>
            	A function that is a full (no parameters dropped) implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
            <param name="services">The services available in this service request.</param>
            <param name="context">Information about the service request.</param>
        </member>
        <member name="T:Atlas.RecursiveBindingImpl`1">
            <summary>
            	A function that is a recursive (resolver only) implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
            <param name="services">The services available in this service request.</param>
        </member>
        <member name="T:Atlas.ContextualBindingImpl`2">
            <summary>
            	A function that is a contextual (context only) implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
            <param name="context">Information about the service request.</param>
        </member>
        <member name="T:Atlas.PureBindingImpl`1">
            <summary>
            	A function that is a pure (no parameters taken) implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
        </member>
        <member name="T:Atlas.WholeNopBindingImpl`2">
            <summary>
            	A function that is a full (no parameters dropped), always Some, implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
            <param name="services">The services available in this service request.</param>
            <param name="context">Information about the service request.</param>
        </member>
        <member name="T:Atlas.RecursiveNopBindingImpl`1">
            <summary>
            	A function that is a recursive (resolver only), always Some, implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
            <param name="services">The services available in this service request.</param>
        </member>
        <member name="T:Atlas.ContextualNopBindingImpl`2">
            <summary>
            	A function that is a contextual (context only), always some, implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
            <param name="context">Information about the service request.</param>
        </member>
        <member name="T:Atlas.PureNopBindingImpl`1">
            <summary>
            	A function that is a pure (no parameters taken), always Some, implementation of <see cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>.
            </summary>
        </member>
        <member name="T:Atlas.Fluent.PendingBindingExtensions">
            <summary>
            	A collection of extension methods for <see cref="T:Atlas.Fluent.IPendingBinding`2"/>.
            </summary>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToConstant``2(Atlas.Fluent.IPendingBinding{``0,``1},``0)">
            <summary>
            	Binds a constant value to the service.
            </summary>
            <param name="this"></param>
            <param name="constant">A constant instance of the service.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToWholeMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.WholeBindingImpl{``0,``1})">
            <summary>
            	Binds a full callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The full binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToRecursiveMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.RecursiveBindingImpl{``0})">
            <summary>
            	Binds a contextual callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The contextual binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToContextualMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.ContextualBindingImpl{``0,``1})">
            <summary>
            	Binds a recursive callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The recursive binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToPureMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.PureBindingImpl{``0})">
            <summary>
            	Binds a pure callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The pure binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToWholeNopMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.WholeNopBindingImpl{``0,``1})">
            <summary>
            	Binds a full, always Some, callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The full binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToRecursiveNopMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.RecursiveNopBindingImpl{``0})">
            <summary>
            	Binds a recursive, always Some, callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The recursive binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>		
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToContextualNopMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.ContextualNopBindingImpl{``0,``1})">
            <summary>
            	Binds a contextual, always Some, callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The contextual binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingBindingExtensions.ToPureNopMethod``2(Atlas.Fluent.IPendingBinding{``0,``1},Atlas.PureNopBindingImpl{``0})">
            <summary>
            	Binds a pure, always Some, callback method to the service.
            </summary>
            <param name="this"></param>
            <param name="method">The pure binding implementation to use when this binding is called.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="T:Atlas.Fluent.PendingScopedBindingExtensions">
            <summary>
            	A collection of extension methods for <see cref="T:Atlas.Fluent.IPendingScopedBinding`2"/>.
            </summary>
        </member>
        <member name="M:Atlas.Fluent.PendingScopedBindingExtensions.InSingletonScope``2(Atlas.Fluent.IPendingScopedBinding{``0,``1})">
            <summary>
            	Binds this binding as a singleton, contextful service; only one instance will be per context and it will persist for each call to the binding.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingScopedBindingExtensions.InSingletonNopScope``2(Atlas.Fluent.IPendingScopedBinding{``0,``1})">
            <summary>
            	Binds this binding as a singleton, contextless service; only one instance will be retrieved irregardless of context and it will persist for each call to the binding.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.PendingScopedBindingExtensions.InTransientScope``2(Atlas.Fluent.IPendingScopedBinding{``0,``1})">
            <summary>
            	Binds this binding as a transient service; a new instance will be retrieved for each call to the binding.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="T:Atlas.Fluent.ServiceBinderExtensions">
            <summary>
            	A collection of extension methods for <see cref="T:Atlas.IServiceBinder" />.
            </summary>
        </member>
        <member name="M:Atlas.Fluent.ServiceBinderExtensions.Bind``2(Atlas.IServiceBinder)">
            <summary>
            	Creates a pending binding for a service.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.ServiceBinderExtensions.Bind``1(Atlas.IServiceBinder)">
            <summary>
            	Creates a pending binding for a service that expects no context (<see cref="T:Atlas.Unit"/>).
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
        </member>
        <member name="T:Atlas.Fluent.Impl.ConstantServiceBinding`2">
            <summary>
            	A service binding which outputs a constant value, determined before binding.
            </summary>
            <typeparam name="TService">The type of service to produce\.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.Impl.ConstantServiceBinding`2.#ctor(`0)">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.ConstantServiceBinding`2"/>.
            </summary>
            <param name="value">The constant value of the service.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.ConstantServiceBinding`2.Get(Atlas.IServiceResolver,`1)">
            <inheritdoc cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>
        </member>
        <member name="T:Atlas.Fluent.Impl.FunctionServiceBinding`2">
            <summary>
            	A service binding which produces a service determined by a delegate.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.WholeBindingImpl{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The full binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.RecursiveBindingImpl{`0})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The recursive binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.ContextualBindingImpl{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The contextual binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.PureBindingImpl{`0})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The pure binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.WholeNopBindingImpl{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The full, always Some, binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.RecursiveNopBindingImpl{`0})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The recursive, always Some, binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.ContextualNopBindingImpl{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The contextual, always Some, binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.#ctor(Atlas.PureNopBindingImpl{`0})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.FunctionServiceBinding`2"/>.
            </summary>
            <param name="impl">The pure, always Some, binding implementation to use when this binding is called.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.FunctionServiceBinding`2.Get(Atlas.IServiceResolver,`1)">
            <inheritdoc cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>
        </member>
        <member name="T:Atlas.Fluent.Impl.PendingBinding`2">
            <summary>
            	An implementation of <see cref="T:Atlas.Fluent.IPendingBinding`2"/>.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="P:Atlas.Fluent.Impl.PendingBinding`2.Applicator">
            <inheritdoc cref="P:Atlas.Fluent.IPendingBinding`2.Applicator"/>
        </member>
        <member name="M:Atlas.Fluent.Impl.PendingBinding`2.#ctor(Atlas.Fluent.PendingApplicator{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.PendingBinding`2"/>.
            </summary>
            <param name="applicator">The function to set the binding.</param>
        </member>
        <member name="T:Atlas.Fluent.Impl.PendingScopedBinding`2">
            <summary>
            	An implementation of <see cref="T:Atlas.Fluent.IPendingScopedBinding`2"/>.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="P:Atlas.Fluent.Impl.PendingScopedBinding`2.Applicator">
            <inheritdoc cref="P:Atlas.Fluent.IPendingScopedBinding`2.Applicator"/>
        </member>
        <member name="P:Atlas.Fluent.Impl.PendingScopedBinding`2.Binding">
            <inheritdoc cref="P:Atlas.Fluent.IPendingScopedBinding`2.Binding"/>
        </member>
        <member name="M:Atlas.Fluent.Impl.PendingScopedBinding`2.#ctor(Atlas.Fluent.PendingApplicator{`0,`1},Atlas.IServiceBinding{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.PendingScopedBinding`2"/>.
            </summary>
            <param name="applicator">The function to set the binding.</param>
            <param name="binding">The binding, without scope.</param>
        </member>
        <member name="T:Atlas.Fluent.Impl.SingletonNopServiceBinding`2">
            <summary>
            	A service binding which calculates a value when first called, and outputs that value for every call.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.Impl.SingletonNopServiceBinding`2.#ctor(Atlas.IServiceBinding{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.SingletonNopServiceBinding`2"/>.
            </summary>
            <param name="binding">The binding, without scope.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.SingletonNopServiceBinding`2.Get(Atlas.IServiceResolver,`1)">
            <inheritdoc cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>
        </member>
        <member name="T:Atlas.Fluent.Impl.SingletonServiceBinding`2">
            <summary>
            	A service binding which calculates a value when first called, and outputs that value for every call.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.Fluent.Impl.SingletonServiceBinding`2.#ctor(Atlas.IServiceBinding{`0,`1})">
            <summary>
            	Constructs an instance of <see cref="T:Atlas.Fluent.Impl.SingletonNopServiceBinding`2"/>.
            </summary>
            <param name="binding">The binding, without scope.</param>
        </member>
        <member name="M:Atlas.Fluent.Impl.SingletonServiceBinding`2.Get(Atlas.IServiceResolver,`1)">
            <inheritdoc cref="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)"/>
        </member>
        <member name="T:Atlas.Fluent.PendingApplicator`2">
            <summary>
            	A function that applies a binding to a binder.
            </summary>
            <param name="binding">The binding to apply.</param>
            <typeparam name="TService">The service the binding produces.</typeparam>
            <typeparam name="TContext">The context the binding consumes.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Atlas.Fluent.IPendingBinding`2">
            <summary>
            	Represent a binding not yet scoped and bound to a <see cref="T:Atlas.IServiceBinder" />.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="P:Atlas.Fluent.IPendingBinding`2.Applicator">
            <summary>
            	The function to set the binding.
            </summary>
        </member>
        <member name="T:Atlas.Fluent.IPendingScopedBinding`2">
            <summary>
            	Represents a binding that has been created and scoped but not yet bound to a <see cref="T:Atlas.IServiceBinder" />.
            	<p>This interface composites <see cref="P:Atlas.Fluent.IPendingScopedBinding`2.Applicator"/> to improve ease of extension method usage.</p>
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="P:Atlas.Fluent.IPendingScopedBinding`2.Applicator">
            <summary>
            	The function to set the binding.
            </summary>
        </member>
        <member name="P:Atlas.Fluent.IPendingScopedBinding`2.Binding">
            <summary>
            	The binding awaiting to be bound.
            </summary>
        </member>
        <member name="T:Atlas.Impl.StandardServiceKernel">
            <summary>
            	An implementation of <see cref="T:Atlas.IServiceKernel" /> with recursive path detection.
            </summary>
        </member>
        <member name="P:Atlas.Impl.StandardServiceKernel.MaxRecursion">
            <summary>
            	The maximum amount of times to recursively get a service. If a service is gotten more than this many times within the same call, an exception is thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The inner value of <paramref name="value" /> was less than 0.</exception>
        </member>
        <member name="M:Atlas.Impl.StandardServiceKernel.#ctor">
            <summary>
            	Creates an instance of <see cref="T:Atlas.Impl.StandardServiceKernel" />.
            </summary>
        </member>
        <member name="M:Atlas.Impl.StandardServiceKernel.Bind``2(Atlas.IServiceBinding{``0,``1})">
            <inheritdoc cref="M:Atlas.IServiceBinder.Bind``2(Atlas.IServiceBinding{``0,``1})" />
        </member>
        <member name="M:Atlas.Impl.StandardServiceKernel.Get``2(``1)">
            <inheritdoc cref="M:Atlas.IServiceResolver.Get``2(``1)" />
        </member>
        <member name="T:Atlas.IEntryModule`1">
            <summary>
            	Represents a loadable module which can be reflectively loaded.
            </summary>
        </member>
        <member name="T:Atlas.IModule">
            <summary>
            	Represents a loadable module.
            </summary>
        </member>
        <member name="M:Atlas.IModule.Load(Atlas.IServiceKernel)">
            <summary>
            	Loads this module and associated objects into an <see cref="T:Atlas.IServiceKernel" />.
            </summary>
            <param name="kernel">The kernel to load this module into.</param>
        </member>
        <member name="T:Atlas.IServiceBinder">
            <summary>
            	Represents a service setter.
            </summary>
        </member>
        <member name="M:Atlas.IServiceBinder.Bind``2(Atlas.IServiceBinding{``0,``1})">
            <summary>
            	Assigns a binding to a service.
            </summary>
            <param name="binding">The binding for the service.</param>
            <typeparam name="TService">The service to assign the binding to.</typeparam>
            <typeparam name="TContext">The context the binding uses.</typeparam>
        </member>
        <member name="T:Atlas.IServiceBinding`2">
            <summary>
            	Represents a service implementation.
            </summary>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="M:Atlas.IServiceBinding`2.Get(Atlas.IServiceResolver,`1)">
            <summary>
            	Gets the service this binding represents, given other services and contextual information.
            </summary>
            <param name="services">The services available in this service request.</param>
            <param name="context">Information about the service request.</param>
        </member>
        <member name="T:Atlas.IServiceKernel">
            <summary>
            	Represents the highest level of access to a collection of services.
            </summary>
        </member>
        <member name="T:Atlas.IServiceResolver">
            <summary>
            	Represents a service getter.
            </summary>
        </member>
        <member name="M:Atlas.IServiceResolver.Get``2(``1)">
            <summary>
            	Resolves a service using a context.
            </summary>
            <param name="context">The context to fetch the service with.</param>
            <typeparam name="TService">The type of service to produce.</typeparam>
            <typeparam name="TContext">The type of context to consume.</typeparam>
        </member>
        <member name="T:Atlas.Mapper`2">
            <summary>
            	Maps one value to another.
            	Comparable to <see cref="T:System.Converter`2"/>, but with covariance and invariance
            </summary>
            <typeparam name="TSource">The type of the value.</typeparam>
            <typeparam name="TMapped">The type to map the value to.</typeparam>
        </member>
        <member name="T:Atlas.Mapper`3">
            <summary>
            	Maps one value to another, using a passed state.
            	Comparable to <see cref="T:System.Converter`2"/>, but with covariance and invariance, and nullable attributes.
            </summary>
            <param name="value">The value to map.</param>
            <param name="state">The state to pass into the function.</param>
            <typeparam name="TSource">The type of the value.</typeparam>
            <typeparam name="TState">The type of the state to pass in.</typeparam>
            <typeparam name="TMapped">The type to map the value to.</typeparam>
        </member>
        <member name="T:Atlas.FunctionalEqualityComparer`1">
            <summary>
            	Checks the equality of two values, in a function form.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <typeparam name="TValue">The type of both of the values.</typeparam>
        </member>
        <member name="T:Atlas.Guard">
            <summary>
            	A tool to be called at the beginning of a method to guard against bad input.
            </summary>
        </member>
        <member name="M:Atlas.Guard.NullElement``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            	Throws an exception if an element of the parameter is <see langword="null" />.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <typeparam name="T">The type of the items in the parameter.</typeparam>
        </member>
        <member name="M:Atlas.Guard.NullIndex``1(``0[],System.String)">
            <summary>
            	Throws an indexed exception if an element of the parameter is <see langword="null" />.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <typeparam name="T">The type of the items in the parameter.</typeparam>
        </member>
        <member name="M:Atlas.Guard.NullIndex``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            	Throws an indexed exception if an element of the parameter is <see langword="null" />.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <typeparam name="T">The type of the items in the parameter.</typeparam>
        </member>
        <member name="M:Atlas.Guard.NullIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
            	Throws an indexed exception if an element of the parameter is <see langword="null" />.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <typeparam name="T">The type of the items in the parameter.</typeparam>
        </member>
        <member name="M:Atlas.Guard.Null``1(``0,System.String)">
            <summary>
            	Throws an exception if the parameter is <see langword="null" />.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Atlas.Guard.NullOrWhiteSpace(System.String,System.String)">
            <summary>
            	Throws an exception if the parameter is <see langword="null" /> or whitespace (includes empty).
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Atlas.Guard.Negative(System.Int32,System.String)">
            <summary>
            	Throws an exception if the parameter is negative.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Atlas.Guard.NonPositive(System.Int32,System.String)">
            <summary>
            	Throws an exception if the parameter is negative or zero.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Atlas.Guard.Index``1(System.Int32,System.String,``0[])">
            <summary>
            	Throws an exception if the index is out of bounds of the array.
            </summary>
            <param name="value">The value of the index parameter.</param>
            <param name="name">The name of the index parameter.</param>
            <param name="array">The array the index is intended for.</param>
        </member>
        <member name="M:Atlas.Guard.Index``1(System.Int32,System.String,System.Collections.Generic.IList{``0})">
            <summary>
            	Throws an exception if the index is out of bounds of the list.
            </summary>
            <param name="value">The value of the index parameter.</param>
            <param name="name">The name of the index parameter.</param>
            <param name="list">The list the index is intended for.</param>
        </member>
        <member name="M:Atlas.Guard.Index``1(System.Int32,System.String,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            	Throws an exception if the index is out of bounds of the read-only list.
            </summary>
            <param name="value">The value of the index parameter.</param>
            <param name="name">The name of the index parameter.</param>
            <param name="list">The array the index is intended for.</param>
        </member>
        <member name="T:Atlas.Nullability`1">
            <summary>
            	Contains information about the nullability of this type and the comparison of and instance of the type to <see langword="null"/>.
            </summary>
            <typeparam name="T">The type to store information about.</typeparam>
        </member>
        <member name="T:Atlas.Nullability`1.NullCheck">
            <summary>
            	Checks if a value is <see langword="null"/>
            </summary>
            <param name="value">The possibly-null value to check.</param>
        </member>
        <member name="P:Atlas.Nullability`1.IsNullable">
            <summary>
            	Whether or not this type is nullable.
            </summary>
        </member>
        <member name="P:Atlas.Nullability`1.IsNull">
            <summary>
            	The <seealso cref="T:Atlas.Nullability`1.NullCheck"/> to be used for this type.
            </summary>
        </member>
        <member name="T:Atlas.Option">
            <summary>
            	Constructors for the <see cref="T:Atlas.Option`1"/> discriminated union.
            </summary>
        </member>
        <member name="M:Atlas.Option.Some``1(``0)">
            <summary>
            	Constructs a Some, which contains an inner value.
            </summary>
            <param name="value">The inner value.</param>
            <typeparam name="T">The type of the inner value (<paramref name="value"/>).</typeparam>
        </member>
        <member name="M:Atlas.Option.None``1">
            <summary>
            	Constructs a None.
            </summary>
            <typeparam name="T">The type of the would-be inner value.</typeparam>
        </member>
        <member name="T:Atlas.OptionExtensions">
            <summary>
            	Extension methods related to the <see cref="T:Atlas.Option`1"/> discriminated union.
            </summary>
        </member>
        <member name="M:Atlas.OptionExtensions.As``2(``0)">
            <summary>
            	Returns Some(<typeparamref name="TCasted"/>) if <typeparamref name="T"/> can be casted to <typeparamref name="TCasted"/>, otherwise None.
            </summary>
            <param name="this"></param>
            <typeparam name="T">The type of the inner value.</typeparam>
            <typeparam name="TCasted">The type to cast to.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Flatten``1(Atlas.Option{Atlas.Option{``0}})">
            <summary>
            	Combines the inner and outer options into a singular <see cref="T:Atlas.Option`1"/>.
            </summary>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Contains``1(Atlas.Option{``0},``0)">
            <summary>
            	Checks if there is an inner value and if it equates to the provided value.
            </summary>
            <param name="this"></param>
            <param name="value">The value to compare equality to.</param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Contains``1(Atlas.Option{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            	Checks if there is an inner value and if it equates to the provided value.
            </summary>
            <param name="this"></param>
            <param name="value">The value to compare equality to.</param>
            <param name="comparer">The comparer to check equality between the inner value and other value.</param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Contains``1(Atlas.Option{``0},``0,Atlas.FunctionalEqualityComparer{``0})">
            <summary>
            	Checks if there is an inner value and if it equates to the provided value.
            </summary>
            <param name="this"></param>
            <param name="value">The value to compare equality to.</param>
            <param name="comparer">The comparer to check equality between the inner value and other value.</param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Matches``1(Atlas.Option{``0},Atlas.Option{``0})">
            <summary>
            	Compares the equality of self and another <see cref="T:Atlas.Option`1"/>.
            </summary>
            <param name="this"></param>
            <param name="other">The option to compare equality with.</param>
            <typeparam name="T">The type of the inner values.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Matches``1(Atlas.Option{``0},Atlas.Option{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            	Compares the equality of self and another <see cref="T:Atlas.Option`1"/>.
            </summary>
            <param name="this"></param>
            <param name="other">The option to compare equality with.</param>
            <param name="comparer">The comparer to check equality between the inner value and other value.</param>
            <typeparam name="T">The type of the inner values.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Matches``1(Atlas.Option{``0},Atlas.Option{``0},Atlas.FunctionalEqualityComparer{``0})">
            <summary>
            	Checks the equality of self and another <see cref="T:Atlas.Option`1"/>.
            </summary>
            <param name="this"></param>
            <param name="other">The option to compare equality with.</param>
            <param name="comparer">The comparer to check equality between the inner value and other value.</param>
            <typeparam name="T">The type of the inner values.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Take``1(Atlas.Option{``0}@)">
            <summary>
            	Sets self to None and returns the previous value of self.
            </summary>
            <param name="this"></param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.Replace``1(Atlas.Option{``0}@,``0)">
            <summary>
            	Sets self to Some(<paramref name="value"/>) and returns the previous value of self.
            </summary>
            <param name="this"></param>
            <param name="value">The new inner value.</param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.GetOrInsert``1(Atlas.Option{``0}@,``0)">
            <summary>
            	Sets self to Some(<paramref name="value"/>) if it was not Some already, and returns the inner value.
            </summary>
            <param name="this"></param>
            <param name="value">The inner value if one is not present.</param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.GetOrInsertWith``1(Atlas.Option{``0}@,System.Func{``0})">
            <summary>
            	Sets self to Some(<paramref name="value"/>()) if it was not Some already, and returns the inner value.
            	<p>This is the lazily-evaluated variant of <seealso cref="M:Atlas.OptionExtensions.GetOrInsert``1(Atlas.Option{``0}@,``0)"/>.</p>
            </summary>
            <param name="this"></param>
            <param name="value">The getter to invoke if an inner value is not present.</param>
            <typeparam name="T">The type of the inner value.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.WhereSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Atlas.Option{``1}})">
            <summary>
            	Simultaneously filters and projects a sequence of elements onto a new form.
            	<p>This is equivalent to a <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})"/> call chained into a <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.</p>
            </summary>
            <param name="this"></param>
            <param name="selector">Projects a <typeparamref name="TSource"/> onto an <see cref="T:Atlas.Option`1"/>.</param>
            <typeparam name="TSource">The type of the elements of the source.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
        </member>
        <member name="M:Atlas.OptionExtensions.WhereSome``1(System.Collections.Generic.IEnumerable{Atlas.Option{``0}})">
            <summary>
            	Projects a sequence of <see cref="T:Atlas.Option`1"/> into the inner values of the Somes in the sequence.
            </summary>
            <typeparam name="T">The type of the inner values.</typeparam>
        </member>
        <member name="T:Atlas.Option`1">
            <summary>
            	A discriminated (binary) union that represents an optional, non-nullable value.
            	<p>If no value is present, it is None, otherwise is it Some.</p>
            	<p>This is a replacement for <see cref="T:System.Nullable`1" /> and nullable reference types, designed to unify both.</p>
            </summary>
            <typeparam name="T">The type of the value contained.</typeparam>
        </member>
        <member name="P:Atlas.Option`1.IsSome">
            <summary>
            	Whether or not a value is present. Opposite of <seealso cref="P:Atlas.Option`1.IsNone"/>.
            	<p>If you are going to access the value afterward, use <seealso cref="M:Atlas.Option`1.MatchSome(`0@)"/> to do so atomically.</p>
            </summary>
        </member>
        <member name="P:Atlas.Option`1.IsNone">
            <summary>
            	Whether or not a value is not present. Opposite of <seealso cref="P:Atlas.Option`1.IsSome"/>.
            </summary>
        </member>
        <member name="M:Atlas.Option`1.MatchSome(`0@)">
            <summary>
            	Returns <see langword="true"/> with <paramref name="value"/> if Some, otherwise returns <see langword="false"/>.
            </summary>
            <param name="value">The value, if the return value is <see langword="true"/>.</param>
        </member>
        <member name="M:Atlas.Option`1.Expect(System.String)">
            <summary>
            	Returns the inner value if Some, otherwise throws an <see cref="T:System.InvalidOperationException"/> with the message provided by <paramref name="message"/>.
            	<p>Opposite of <seealso cref="M:Atlas.Option`1.ExpectNone(System.String)"/>.</p>
            </summary>
            <param name="message">The message to throw if None.</param>
        </member>
        <member name="M:Atlas.Option`1.ExpectNone(System.String)">
            <summary>
            	Throws an <see cref="T:System.InvalidOperationException"/> with the message provided by <paramref name="message"/> if Some, otherwise does nothing.
            	<p>Opposite of <seealso cref="M:Atlas.Option`1.Expect(System.String)"/>.</p>
            </summary>
            <param name="message">The message to throw if Some.</param>
        </member>
        <member name="M:Atlas.Option`1.Unwrap">
            <summary>
            	Returns the inner value if Some, otherwise throws an <see cref="T:System.InvalidOperationException"/>.
            	Shortcut for <seealso cref="M:Atlas.Option`1.Expect(System.String)"/>. Opposite of <seealso cref="M:Atlas.Option`1.UnwrapNone"/>.
            </summary>
        </member>
        <member name="M:Atlas.Option`1.UnwrapNone">
            <summary>
            	If Some, throws an <see cref="T:System.InvalidOperationException"/>
            	Shortcut for <seealso cref="M:Atlas.Option`1.ExpectNone(System.String)"/>. Opposite of <seealso cref="M:Atlas.Option`1.Unwrap"/>.
            </summary>
        </member>
        <member name="M:Atlas.Option`1.UnwrapOr(`0)">
            <summary>
            	Returns the inner value if Some, otherwise returns <paramref name="default"/>.
            </summary>
            <param name="default">The value to return if None.</param>
        </member>
        <member name="M:Atlas.Option`1.UnwrapOrElse(System.Func{`0})">
            <summary>
            	Returns the inner value if Some, otherwise returns the result of <paramref name="default"/>.
            	<p>This is the lazily-evaluated variant of <seealso cref="M:Atlas.Option`1.UnwrapOr(`0)"/>.</p>
            </summary>
            <param name="default">The getter to invoke if an inner value is not present.</param>
        </member>
        <member name="M:Atlas.Option`1.Or(Atlas.Option{`0})">
            <summary>
            	Returns self if Some, otherwise <paramref name="other"/>.
            	<p>Opposite of <seealso cref="M:Atlas.Option`1.And(Atlas.Option{`0})"/>.</p>
            </summary>
            <param name="other">The option to return if None.</param>
        </member>
        <member name="M:Atlas.Option`1.OrElse(System.Func{Atlas.Option{`0}})">
            <summary>
            	Returns self if Some, otherwise <paramref name="other"/>.
            	<p>This is the lazily-evaluated variant of <seealso cref="M:Atlas.Option`1.Or(Atlas.Option{`0})"/>.</p>
            </summary>
            <param name="other">The getter to invoke if None.</param>
        </member>
        <member name="M:Atlas.Option`1.And(Atlas.Option{`0})">
            <summary>
            	Returns <paramref name="other"/> if Some, otherwise None.
            	Opposite of <seealso cref="M:Atlas.Option`1.Or(Atlas.Option{`0})"/>.
            </summary>
            <param name="other">The option to return if Some.</param>
        </member>
        <member name="M:Atlas.Option`1.Xor(Atlas.Option{`0})">
            <summary>
            	Returns self or <paramref name="other"/> if only one is Some, otherwise returns None.
            </summary>
            <param name="other">The option to return if it is Some and self is None.</param>
        </member>
        <member name="M:Atlas.Option`1.Filter(System.Func{`0,System.Boolean})">
            <summary>
            	Returns Some if Some and <paramref name="predicate"/>(v), otherwise returns None.
            </summary>
            <param name="predicate">The function that determines if Some remains Some (<see langword="true"/>) or turns into None (<see langword="false"/>).</param>
        </member>
        <member name="M:Atlas.Option`1.Map``1(Atlas.Mapper{`0,``0})">
            <summary>
            	Returns Some(<paramref name="mapper"/>(v)) if Some, otherwise returns None.
            </summary>
            <param name="mapper">The function to mutate the inner value if Some.</param>
            <typeparam name="TMapped">The type to map the inner value to.</typeparam>
        </member>
        <member name="M:Atlas.Option`1.MapAs``1">
            <summary>
            	Returns Some(<typeparamref name="TMapped"/>) if Some(<typeparamref name="T"/>) and <typeparamref name="TMapped"/> is assignable from <typeparamref name="T"/>, otherwise none.
            </summary>
            <typeparam name="TMapped">The type to cast to.</typeparam>
        </member>
        <member name="M:Atlas.Option`1.MapOr``1(``0,Atlas.Mapper{`0,``0})">
            <summary>
            	Returns Some(<paramref name="mapper"/>(v)) if Some, otherwise returns Some(<paramref name="default"/>).
            	<p>Compound of <seealso cref="M:Atlas.Option`1.Map``1(Atlas.Mapper{`0,``0})"/> and <seealso cref="M:Atlas.Option`1.Or(Atlas.Option{`0})"/>.</p>
            </summary>
            <param name="default">The value to return if None.</param>
            <param name="mapper">The function to mutate the inner value if Some.</param>
            <typeparam name="TMapped">The type to map the inner value to.</typeparam>
        </member>
        <member name="M:Atlas.Option`1.MapOrElse``1(System.Func{``0},Atlas.Mapper{`0,``0})">
            <summary>
            	Returns Some(<paramref name="mapper"/>(v)) if Some, otherwise returns Some(<paramref name="default"/>()).
            	<p>This is the lazily-evaluated variant of <seealso cref="M:Atlas.Option`1.MapOr``1(``0,Atlas.Mapper{`0,``0})"/>.</p>
            </summary>
            <param name="default">The getter to invoke if None.</param>
            <param name="mapper">The function to mutate the inner value if Some.</param>
            <typeparam name="TMapped">The type to map the inner value to.</typeparam>
        </member>
        <member name="M:Atlas.Option`1.ToString">
            <summary>
            	Returns "Some(v)" if Some, otherwise (None) returns "None".
            </summary>
        </member>
        <member name="T:Atlas.Unit">
            <summary>
                A type that has no information.
            </summary>
        </member>
    </members>
</doc>
cs.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            	The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            	The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            	The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            	The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            	the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
</doc>
hod that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            	The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            	the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
</doc>
